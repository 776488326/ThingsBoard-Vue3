{"version":3,"file":"use-global-config-40970ff6.js","sources":["../../node_modules/element-plus/es/components/config-provider/src/constants.mjs","../../node_modules/element-plus/es/components/config-provider/src/hooks/use-global-config.mjs"],"sourcesContent":["const configProviderContextKey = Symbol();\n\nexport { configProviderContextKey };\n//# sourceMappingURL=constants.mjs.map\n","import { ref, getCurrentInstance, inject, computed, unref, provide } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { configProviderContextKey } from '../constants.mjs';\nimport { useNamespace, defaultNamespace, namespaceContextKey } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale, localeContextKey } from '../../../../hooks/use-locale/index.mjs';\nimport { useZIndex, defaultInitialZIndex, zIndexContextKey } from '../../../../hooks/use-z-index/index.mjs';\nimport { debugWarn } from '../../../../utils/error.mjs';\nimport { SIZE_INJECTION_KEY } from '../../../../hooks/use-size/index.mjs';\nimport { keysOf } from '../../../../utils/objects.mjs';\n\nconst globalConfig = ref();\nfunction useGlobalConfig(key, defaultValue = void 0) {\n  const config = getCurrentInstance() ? inject(configProviderContextKey, globalConfig) : globalConfig;\n  if (key) {\n    return computed(() => {\n      var _a, _b;\n      return (_b = (_a = config.value) == null ? void 0 : _a[key]) != null ? _b : defaultValue;\n    });\n  } else {\n    return config;\n  }\n}\nfunction useGlobalComponentSettings(block, sizeFallback) {\n  const config = useGlobalConfig();\n  const ns = useNamespace(block, computed(() => {\n    var _a;\n    return ((_a = config.value) == null ? void 0 : _a.namespace) || defaultNamespace;\n  }));\n  const locale = useLocale(computed(() => {\n    var _a;\n    return (_a = config.value) == null ? void 0 : _a.locale;\n  }));\n  const zIndex = useZIndex(computed(() => {\n    var _a;\n    return ((_a = config.value) == null ? void 0 : _a.zIndex) || defaultInitialZIndex;\n  }));\n  const size = computed(() => {\n    var _a;\n    return unref(sizeFallback) || ((_a = config.value) == null ? void 0 : _a.size) || \"\";\n  });\n  provideGlobalConfig(computed(() => unref(config) || {}));\n  return {\n    ns,\n    locale,\n    zIndex,\n    size\n  };\n}\nconst provideGlobalConfig = (config, app, global = false) => {\n  var _a;\n  const inSetup = !!getCurrentInstance();\n  const oldConfig = inSetup ? useGlobalConfig() : void 0;\n  const provideFn = (_a = app == null ? void 0 : app.provide) != null ? _a : inSetup ? provide : void 0;\n  if (!provideFn) {\n    debugWarn(\"provideGlobalConfig\", \"provideGlobalConfig() can only be used inside setup().\");\n    return;\n  }\n  const context = computed(() => {\n    const cfg = unref(config);\n    if (!(oldConfig == null ? void 0 : oldConfig.value))\n      return cfg;\n    return mergeConfig(oldConfig.value, cfg);\n  });\n  provideFn(configProviderContextKey, context);\n  provideFn(localeContextKey, computed(() => context.value.locale));\n  provideFn(namespaceContextKey, computed(() => context.value.namespace));\n  provideFn(zIndexContextKey, computed(() => context.value.zIndex));\n  provideFn(SIZE_INJECTION_KEY, {\n    size: computed(() => context.value.size || \"\")\n  });\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value;\n  }\n  return context;\n};\nconst mergeConfig = (a, b) => {\n  var _a;\n  const keys = [.../* @__PURE__ */ new Set([...keysOf(a), ...keysOf(b)])];\n  const obj = {};\n  for (const key of keys) {\n    obj[key] = (_a = b[key]) != null ? _a : a[key];\n  }\n  return obj;\n};\n\nexport { provideGlobalConfig, useGlobalComponentSettings, useGlobalConfig };\n//# sourceMappingURL=use-global-config.mjs.map\n"],"names":["configProviderContextKey","globalConfig","ref","useGlobalConfig","key","defaultValue","config","getCurrentInstance","inject","computed","_a","_b","useGlobalComponentSettings","block","sizeFallback","ns","useNamespace","defaultNamespace","locale","useLocale","zIndex","useZIndex","defaultInitialZIndex","size","unref","provideGlobalConfig","app","global","inSetup","oldConfig","provideFn","provide","context","cfg","mergeConfig","localeContextKey","namespaceContextKey","zIndexContextKey","SIZE_INJECTION_KEY","a","b","keys","keysOf","obj"],"mappings":"yLAAA,MAAMA,EAA2B,OAAQ,ECWnCC,EAAeC,EAAG,EACxB,SAASC,EAAgBC,EAAKC,EAAe,OAAQ,CACnD,MAAMC,EAASC,IAAuBC,EAAOR,EAA0BC,CAAY,EAAIA,EACvF,OAAIG,EACKK,EAAS,IAAM,CACpB,IAAIC,EAAIC,EACR,OAAQA,GAAMD,EAAKJ,EAAO,QAAU,KAAO,OAASI,EAAGN,CAAG,IAAM,KAAOO,EAAKN,CAClF,CAAK,EAEMC,CAEX,CACA,SAASM,EAA2BC,EAAOC,EAAc,CACvD,MAAMR,EAASH,IACTY,EAAKC,EAAaH,EAAOJ,EAAS,IAAM,CAC5C,IAAIC,EACJ,QAASA,EAAKJ,EAAO,QAAU,KAAO,OAASI,EAAG,YAAcO,CACjE,CAAA,CAAC,EACIC,EAASC,EAAUV,EAAS,IAAM,CACtC,IAAIC,EACJ,OAAQA,EAAKJ,EAAO,QAAU,KAAO,OAASI,EAAG,MAClD,CAAA,CAAC,EACIU,EAASC,EAAUZ,EAAS,IAAM,CACtC,IAAIC,EACJ,QAASA,EAAKJ,EAAO,QAAU,KAAO,OAASI,EAAG,SAAWY,CAC9D,CAAA,CAAC,EACIC,EAAOd,EAAS,IAAM,CAC1B,IAAIC,EACJ,OAAOc,EAAMV,CAAY,KAAOJ,EAAKJ,EAAO,QAAU,KAAO,OAASI,EAAG,OAAS,EACtF,CAAG,EACD,OAAAe,EAAoBhB,EAAS,IAAMe,EAAMlB,CAAM,GAAK,CAAE,CAAA,CAAC,EAChD,CACL,GAAAS,EACA,OAAAG,EACA,OAAAE,EACA,KAAAG,CACJ,CACA,CACA,MAAME,EAAsB,CAACnB,EAAQoB,EAAKC,EAAS,KAAU,CAC3D,IAAIjB,EACJ,MAAMkB,EAAU,CAAC,CAACrB,IACZsB,EAAYD,EAAUzB,EAAiB,EAAG,OAC1C2B,GAAapB,EAAKgB,GAAO,KAAO,OAASA,EAAI,UAAY,KAAOhB,EAAKkB,EAAUG,EAAU,OAC/F,GAAI,CAACD,EAEH,OAEF,MAAME,EAAUvB,EAAS,IAAM,CAC7B,MAAMwB,EAAMT,EAAMlB,CAAM,EACxB,OAAMuB,GAAa,MAAgBA,EAAU,MAEtCK,EAAYL,EAAU,MAAOI,CAAG,EAD9BA,CAEb,CAAG,EACD,OAAAH,EAAU9B,EAA0BgC,CAAO,EAC3CF,EAAUK,EAAkB1B,EAAS,IAAMuB,EAAQ,MAAM,MAAM,CAAC,EAChEF,EAAUM,EAAqB3B,EAAS,IAAMuB,EAAQ,MAAM,SAAS,CAAC,EACtEF,EAAUO,EAAkB5B,EAAS,IAAMuB,EAAQ,MAAM,MAAM,CAAC,EAChEF,EAAUQ,EAAoB,CAC5B,KAAM7B,EAAS,IAAMuB,EAAQ,MAAM,MAAQ,EAAE,CACjD,CAAG,GACGL,GAAU,CAAC1B,EAAa,SAC1BA,EAAa,MAAQ+B,EAAQ,OAExBA,CACT,EACME,EAAc,CAACK,EAAGC,IAAM,CAC5B,IAAI9B,EACJ,MAAM+B,EAAO,CAAC,GAAmB,IAAI,IAAI,CAAC,GAAGC,EAAOH,CAAC,EAAG,GAAGG,EAAOF,CAAC,CAAC,CAAC,CAAC,EAChEG,EAAM,CAAA,EACZ,UAAWvC,KAAOqC,EAChBE,EAAIvC,CAAG,GAAKM,EAAK8B,EAAEpC,CAAG,IAAM,KAAOM,EAAK6B,EAAEnC,CAAG,EAE/C,OAAOuC,CACT","x_google_ignoreList":[0,1]}